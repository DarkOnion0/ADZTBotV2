name: Container

on:
  release:
    types: [ published ]

  push:
    branches: [ main ]

env:
  IMAGE_NAME: adztbotv2
  CONTAINER_REGISTRY: ghcr.io

jobs:
  Container:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install qemu-user-static jq skopeo

      - name: Get the actual latest image digest
        run: |
          echo "OLD_LATEST_DIGEST=$(skopeo inspect docker://ghcr.io/darkonion0/adztbotv2:latest | jq .Digest | tr -d \")" >> $GITHUB_ENV

      - name: Format tag and image name
        run: |
          FORMATED_REGISTRY=${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}

          # Change all uppercase to lowercase and add it to github env
          echo "FORMATED_REGISTRY=$(echo $FORMATED_REGISTRY | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use `latest` tag convention and add it to github env
          [ "$VERSION" == "main" ] && VERSION=latest
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Format user name
        if: env.VERSION == 'latest'
        run: |
          USER=${{ github.repository_owner }}

          # Change all uppercase to lowercase and add it to github env
          echo "USER=$(echo $USER | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV

      - name: Buildah build
        id: buildah_build
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.VERSION }}
          #platforms: linux/amd64, linux/arm64, linux/arm, linux/386, windows/amd64, windows/386, darwin/amd64
          platforms: linux/amd64, linux/arm64, linux/arm, linux/386
          containerfiles: |
            ./Dockerfile

      - name: Show buildah_build output
        run: |
          echo "Image: ${{ steps.buildah_build.outputs.image }}"
          echo "Tags: ${{ steps.buildah_build.outputs.tags }}"
          echo "Tagged Image: ${{ steps.buildah_build.outputs.image-with-tag }}"

      - name: Check images created in the buildah_build step
        run: buildah images | grep '${{ env.IMAGE_NAME }}'

      - name: Check manifest created in the buildah_build step
        run: |
          set -x
          buildah manifest inspect ${{ steps.buildah_build.outputs.image }}:${{ env.VERSION }}

      #- name: Authenticate to ${{ env.CONTAINER_REGISTRY }} with skopeo
      #  if: env.VERSION == 'latest'
      #  run: echo ${{ secrets.GITHUB_TOKEN }} | skopeo login -u ${{ env.USER }} --password-stdin ${{ env.CONTAINER_REGISTRY }}

      - name: Delete old latest image
        if: env.VERSION == 'latest'
        run: skopeo delete --creds=${{ env.USER }}:${{ secrets.GITHUB_TOKEN }} docker://${{ env.FORMATED_REGISTRY }}/${{ env.IMAGE_NAME }}@${{ env.OLD_LATEST_DIGEST }}

      - name: Push to ${{ env.CONTAINER_REGISTRY }}
        id: push-to-registry
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.buildah_build.outputs.image }}
          tags: ${{ steps.buildah_build.outputs.tags }}
          registry: ${{ env.FORMATED_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Show the push action output
        run: |
          echo "${{ toJSON(steps.push-to-registry.outputs) }}"
